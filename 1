import os
import dlib
import numpy as np
import cv2
import pandas as pd
import sqlite3
import datetime
import time
import logging
import RPi.GPIO as GPIO

# GPIO Setup
RELAY_PIN = 17  # Define the GPIO pin connected to the relay module
GPIO.setmode(GPIO.BCM)
GPIO.setup(RELAY_PIN, GPIO.OUT, initial=GPIO.LOW)  # Set relay pin to LOW (lock closed by default)
SOLENOID_OPEN_TIME = 10  # Duration to keep the solenoid lock open (in seconds)

# Dlib: Use frontal face detector
detector = dlib.get_frontal_face_detector()

# Dlib landmark: Get face landmarks
predictor = dlib.shape_predictor('data/data_dlib/shape_predictor_68_face_landmarks.dat')

# Dlib Resnet: Use Dlib resnet50 model to get 128D face descriptor
face_reco_model = dlib.face_recognition_model_v1("data/data_dlib/dlib_face_recognition_resnet_model_v1.dat")

# Create a connection to the database
conn = sqlite3.connect("attendance.db")
cursor = conn.cursor()

# Create a table for the current date
current_date = datetime.datetime.now().strftime("%Y_%m_%d")  # Replace hyphens with underscores
table_name = "attendance"
create_table_sql = f"CREATE TABLE IF NOT EXISTS {table_name} (name TEXT, time TEXT, date DATE, UNIQUE(name, date))"
cursor.execute(create_table_sql)

# Commit changes and close the connection
conn.commit()
conn.close()

class Face_Recognizer:
    def __init__(self):
        self.font = cv2.FONT_ITALIC

        # FPS
        self.frame_time = 0
        self.frame_start_time = 0
        self.fps = 0
        self.fps_show = 0
        self.start_time = time.time()

        # Count for frames
        self.frame_cnt = 0

        # Save the features of faces in the database
        self.face_features_known_list = []
        # Save the name of faces in the database
        self.face_name_known_list = []

        # Lists to save centroid positions of ROI in frames
        self.last_frame_face_centroid_list = []
        self.current_frame_face_centroid_list = []

        # Lists to save names of faces in frames
        self.last_frame_face_name_list = []
        self.current_frame_face_name_list = []

        # Count for faces in frames
        self.last_frame_face_cnt = 0
        self.current_frame_face_cnt = 0

        # Save the Euclidean distance for face recognition
        self.current_frame_face_X_e_distance_list = []

        # Save the positions and names of faces captured
        self.current_frame_face_position_list = []
        self.current_frame_face_feature_list = []

        # Euclidean distance between centroids of frames
        self.last_current_frame_centroid_e_distance = 0

        # Reclassify after 'reclassify_interval' frames
        self.reclassify_interval_cnt = 0
        self.reclassify_interval = 10

    # Get known faces from "features_all.csv"
    def get_face_database(self):
        if os.path.exists("data/features_all.csv"):
            path_features_known_csv = "data/features_all.csv"
            csv_rd = pd.read_csv(path_features_known_csv, header=None)
            for i in range(csv_rd.shape[0]):
                features_someone_arr = []
                self.face_name_known_list.append(csv_rd.iloc[i][0])
                for j in range(1, 129):
                    if csv_rd.iloc[i][j] == '':
                        features_someone_arr.append('0')
                    else:
                        features_someone_arr.append(csv_rd.iloc[i][j])
                self.face_features_known_list.append(features_someone_arr)
            logging.info("Faces in Database: %d", len(self.face_features_known_list))
            return 1
        else:
            logging.warning("'features_all.csv' not found!")
            logging.warning("Please run 'get_faces_from_camera.py' and 'features_extraction_to_csv.py' before 'face_reco_from_camera.py'")
            return 0

    def update_fps(self):
        now = time.time()
        # Refresh fps per second
        if str(self.start_time).split(".")[0] != str(now).split(".")[0]:
            self.fps_show = self.fps
        self.start_time = now
        self.frame_time = now - self.frame_start_time
        self.fps = 1.0 / self.frame_time
        self.frame_start_time = now

    @staticmethod
    # Compute the Euclidean distance between two 128D features
    def return_euclidean_distance(feature_1, feature_2):
        feature_1 = np.array(feature_1)
        feature_2 = np.array(feature_2)
        dist = np.sqrt(np.sum(np.square(feature_1 - feature_2)))
        return dist

    # Use centroid tracker to link face in current frame with person in last frame
    def centroid_tracker(self):
        for i in range(len(self.current_frame_face_centroid_list)):
            e_distance_current_frame_person_x_list = []
            # For object 1 in current frame, compute distance with object 1/2/3/4/... in last frame
            for j in range(len(self.last_frame_face_centroid_list)):
                self.last_current_frame_centroid_e_distance = self.return_euclidean_distance(
                    self.current_frame_face_centroid_list[i], self.last_frame_face_centroid_list[j])
                e_distance_current_frame_person_x_list.append(self.last_current_frame_centroid_e_distance)

            last_frame_num = e_distance_current_frame_person_x_list.index(min(e_distance_current_frame_person_x_list))
            self.current_frame_face_name_list[i] = self.last_frame_face_name_list[last_frame_num]

    # Draw notes on the cv2 window
    def draw_note(self, img_rd):
        # Add some info on windows
        cv2.putText(img_rd, "Face Recognizer with Deep Learning", (20, 40), self.font, 1, (255, 255, 255), 1, cv2.LINE_AA)
        cv2.putText(img_rd, "Frame:  " + str(self.frame_cnt), (20, 100), self.font, 0.8, (0, 255, 0), 1, cv2.LINE_AA)
        cv2.putText(img_rd, "FPS:    " + str(self.fps.__round__(2)), (20, 130), self.font, 0.8, (0, 255, 0), 1, cv2.LINE_AA)
        cv2.putText(img_rd, "Faces:  " + str(self.current_frame_face_cnt), (20, 160), self.font, 0.8, (0, 255, 0), 1, cv2.LINE_AA)
        cv2.putText(img_rd, "Q: Quit", (20, 450), self.font, 0.8, (255, 255, 255), 1, cv2.LINE_AA)

        for i in range(len(self.current_frame_face_name_list)):
            img_rd = cv2.putText(img_rd, "Face_" + str(i + 1), tuple(
                [int(self.current_frame_face_centroid_list[i][0]), int(self.current_frame_face_centroid_list[i][1])]),
                                 self.font, 0.8, (255, 190, 0), 1, cv2.LINE_AA)

    # Insert data into database
    def attendance(self, name):
        current_date = datetime.datetime.now().strftime('%Y-%m-%d')
        conn = sqlite3.connect("attendance.db")
        cursor = conn.cursor()
        # Check if the name already has an entry for the current date
        cursor.execute("SELECT * FROM attendance WHERE name = ? AND date = ?", (name, current_date))
        existing_entry = cursor.fetchone()

        if existing_entry:
            print(f"{name} is already marked as present for {current_date}")
        else:
            current_time = datetime.datetime.now().strftime('%H:%M:%S')
            cursor.execute("INSERT INTO attendance (name, time, date) VALUES (?, ?, ?)", (name, current_time, current_date))
            conn.commit()
            print(f"{name} marked as present for {current_date} at {current_time}")

        conn.close()

    def open_solenoid_lock(self):
        GPIO.output(RELAY_PIN, GPIO.HIGH)  # Activate relay (open lock)
        logging.info("Solenoid lock opened")
        time.sleep(SOLENOID_OPEN_TIME)  # Keep lock open for the specified time
        GPIO.output(RELAY_PIN, GPIO.LOW)  # Deactivate relay (close lock)
        logging.info("Solenoid lock closed")

    # Process face detection and recognition from video stream
    def process(self, stream):
        # Get faces known from "features_all.csv"
        if self.get_face_database():
            while stream.isOpened():
                self.frame_cnt += 1
                logging.debug("Frame " + str(self.frame_cnt) + " starts")
                flag, img_rd = stream.read()
                kk = cv2.waitKey(1)

                # Detect faces in the frame
                faces = detector(img_rd, 0)

                self.last_frame_face_name_list = self.current_frame_face_name_list.copy()
                self.last_frame_face_centroid_list = self.current_frame_face_centroid_list.copy()
                self.last_frame_face_cnt = self.current_frame_face_cnt
                self.current_frame_face_name_list = []
                self.current_frame_face_centroid_list = []
                self.current_frame_face_cnt = 0

                for i, face in enumerate(faces):
                    shape = predictor(img_rd, face)
                    face_descriptor = face_reco_model.compute_face_descriptor(img_rd, shape)
                    face_descriptor = np.array(face_descriptor)
                    face_descriptor = face_descriptor.reshape((1, -1))

                    # Get face bounding box
                    x1, y1, x2, y2 = (face.left(), face.top(), face.right(), face.bottom())

                    # Get face centroid
                    x_center = int((x1 + x2) / 2)
                    y_center = int((y1 + y2) / 2)
                    self.current_frame_face_centroid_list.append([x_center, y_center])

                    # Compute the Euclidean distance between the detected face and known faces
                    e_distance_list = []
                    for known_feature in self.face_features_known_list:
                        e_distance = self.return_euclidean_distance(face_descriptor[0], known_feature)
                        e_distance_list.append(e_distance)

                    # Find the face with the minimum Euclidean distance
                    min_e_distance = min(e_distance_list)
                    min_e_distance_index = e_distance_list.index(min_e_distance)
                    face_name = self.face_name_known_list[min_e_distance_index]

                    if min_e_distance < 0.6:  # Threshold for recognizing faces
                        self.current_frame_face_name_list.append(face_name)
                        self.current_frame_face_cnt += 1

                        # Open the solenoid lock if face is recognized
                        self.open_solenoid_lock()

                        # Log attendance
                        self.attendance(face_name)
                    else:
                        self.current_frame_face_name_list.append("Unknown")

                # Track and match faces between frames
                if len(self.last_frame_face_centroid_list) > 0:
                    self.centroid_tracker()

                self.draw_note(img_rd)
                cv2.imshow('Face Recognizer', img_rd)

                if kk == ord('q'):
                    break

                self.update_fps()
                logging.debug("Frame " + str(self.frame_cnt) + " ends")
            stream.release()
            cv2.destroyAllWindows()

if __name__ == '__main__':
    face_recognizer = Face_Recognizer()
    video_capture = cv2.VideoCapture(0)  # Use the default camera
    face_recognizer.process(video_capture)
