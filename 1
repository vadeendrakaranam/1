from flask import Flask, render_template, request, redirect, url_for
import os
import cv2
import pickle
import face_recognition
import pandas as pd
from datetime import datetime

app = Flask(__name__)

# Load known face encodings and details
def load_known_faces():
    if os.path.exists('encodings.pickle'):
        try:
            with open('encodings.pickle', 'rb') as f:
                return pickle.load(f)
        except EOFError:
            # If the file is empty or corrupted, return empty lists
            print("Encodings file is empty or corrupted. Waiting for face enrollment...")
            return [], []
    return [], []

known_faces, known_names = load_known_faces()

def mark_attendance(name):
    # Load attendance data
    if os.path.exists('attendance.csv'):
        df = pd.read_csv('attendance.csv')
    else:
        df = pd.DataFrame(columns=['Name', 'Time'])

    # Check if the name is already in the attendance list
    if name in df['Name'].values:
        # Update the time for this entry
        df.loc[df['Name'] == name, 'Time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    else:
        # Add new entry to the attendance list
        new_entry = pd.DataFrame([[name, datetime.now().strftime('%Y-%m-%d %H:%M:%S')]], columns=['Name', 'Time'])
        df = pd.concat([df, new_entry], ignore_index=True)

    # Save the updated attendance list
    df.to_csv('attendance.csv', index=False)

@app.route('/')
def index():
    # Load attendance data
    if os.path.exists('attendance.csv'):
        df = pd.read_csv('attendance.csv')
    else:
        df = pd.DataFrame(columns=['Name', 'Time'])
    return render_template('index.html', tables=[df.to_html(classes='data')], titles=df.columns.values)

@app.route('/enroll', methods=['GET', 'POST'])
def enroll():
    if request.method == 'POST':
        name = request.form['name']
        admission_number = request.form['admission_number']
        mobile_number = request.form['mobile_number']
        
        # Trigger face registration
        if name:
            register_face(name, admission_number, mobile_number)
        
        return redirect(url_for('index'))
    
    return render_template('enroll.html')

def register_face(name, admission_number, mobile_number):
    # Initialize webcam
    video_capture = cv2.VideoCapture(0)
    print(f"Please look at the camera for face registration...")

    # Capture a single frame
    ret, frame = video_capture.read()
    if ret:
        # Ensure the directory exists
        if not os.path.exists('known_faces'):
            os.makedirs('known_faces')

        face_image_path = f'known_faces/{name}.jpg'
        cv2.imwrite(face_image_path, frame)

        # Encode the new face
        rgb_frame = frame[:, :, ::-1]
        face_encodings = face_recognition.face_encodings(rgb_frame)
        if face_encodings:
            face_encoding = face_encodings[0]
            known_faces.append(face_encoding)
            known_names.append(name)
            
            # Save the updated encodings
            with open('encodings.pickle', 'wb') as f:
                pickle.dump((known_faces, known_names), f)

            # Save additional information
            with open('details.csv', 'a') as f:
                f.write(f'{name},{admission_number},{mobile_number}\n')
        else:
            print("No face detected. Please try again.")
    else:
        print("Failed to capture image from webcam.")

    video_capture.release()

@app.route('/attendance')
def attendance():
    # Load attendance data
    if os.path.exists('attendance.csv'):
        df = pd.read_csv('attendance.csv')
    else:
        df = pd.DataFrame(columns=['Name', 'Time'])

    # Load face details
    if os.path.exists('details.csv'):
        details_df = pd.read_csv('details.csv', names=['Name', 'Admission Number', 'Mobile Number'])
    else:
        details_df = pd.DataFrame(columns=['Name', 'Admission Number', 'Mobile Number'])

    # Merge attendance data with details
    df = df.merge(details_df, on='Name', how='left')
    df.reset_index(drop=True, inplace=True)
    df.index += 1  # Start serial numbers from 1

    return render_template('attendance.html', tables=[df.to_html(classes='data', index=True)], titles=df.columns.values)

@app.route('/detect')
def detect():
    video_capture = cv2.VideoCapture(0)
    ret, frame = video_capture.read()
    if ret:
        rgb_frame = frame[:, :, ::-1]
        face_locations = face_recognition.face_locations(rgb_frame)
        face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

        for face_encoding in face_encodings:
            matches = face_recognition.compare_faces(known_faces, face_encoding)
            name = "Unknown"

            if True in matches:
                first_match_index = matches.index(True)
                name = known_names[first_match_index]

            mark_attendance(name)

    video_capture.release()
    return redirect(url_for('attendance'))

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
